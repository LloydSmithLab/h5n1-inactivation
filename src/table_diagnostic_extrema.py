#!/usr/bin/env python3

import argparse

import polars as pl


def main(
    diagnostic_table_path: str,
    output_path: str,
    separator: str = "\t",
) -> None:
    """
    Summarize an MCMC diagnostic table to get the extrema
    and associated parameters.

    Parameters
    ----------
    diagnostic_table_path : str
        Path to the MCMC diagnostics, as a delimited
        file generated by arviz.summary(kind="diagnostic")

    output_path : str
        Path to save the output table.

    separator : str
        Delimiter for the delimited text
        files specified in diagnostic_table_path and
        output_path. Default
        `\t` (tab-delimited).
    """

    tab = pl.read_csv(
        diagnostic_table_path, separator=separator
    )
    tab_extrema = tab.rename({"": "parameter"}).select(
        max_rhat_param=pl.col("parameter").top_k_by(
            "r_hat", k=1
        ),
        max_rhat=pl.col("r_hat").max(),
        min_ess_bulk_param=pl.col("parameter").bottom_k_by(
            "ess_bulk", k=1
        ),
        min_ess_bulk=pl.col("ess_bulk").min(),
        min_ess_tail_param=pl.col("parameter").bottom_k_by(
            "ess_tail", k=1
        ),
        min_ess_tail=pl.col("ess_tail").min(),
    )

    tab_extrema.write_csv(output_path, separator=separator)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=(
            "Read in MCMC diagnostics and summarize them "
            "to note the extreme values by parameter"
        )
    )

    parser.add_argument(
        "diagnostic_table_path",
        type=str,
        help=(
            "Path to the MCMC diagnostic table "
            "saved as a delimited text file."
        ),
    )

    parser.add_argument(
        "output_path",
        type=str,
        help=("Path to save the generated table."),
    )
    parser.add_argument(
        "-s",
        "--separator",
        type=str,
        help=(
            "Separator for the delimited text file containing "
            "the data (specified in data_path)"
        ),
        default="\t",
    )
    parsed = vars(parser.parse_args())
    main(
        parsed["diagnostic_table_path"],
        parsed["output_path"],
        separator=parsed["separator"],
    )
